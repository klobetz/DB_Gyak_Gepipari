@page "/editstudent"
@using Microsoft.EntityFrameworkCore
@using BlazorApp.Model
@inject BlazorApp.Data.MyDBContext DB
@inject NavigationManager NavManager
@rendermode InteractiveServer

<h3>Edit</h3>
<hr />
@if(EditStudentDB is null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="EditStudentDB" OnValidSubmit="UpdateStudent" FormName="update" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />          
               
                <div class="mb-3">
                    <label for="om" class="form-label">Vezetéknév</label>
                    <InputText id="om" @bind-Value="EditStudentDB.FName" class="form-control" />
                    <ValidationMessage For="()=>EditStudentDB.FName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="om" class="form-label">Keresztnév</label>
                    <InputText id="om" @bind-Value="EditStudentDB.LName" class="form-control" />
                    <ValidationMessage For="()=>EditStudentDB.LName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="om" class="form-label">Születési idő</label>
                    <InputDate id="om" @bind-Value="EditStudentDB.Birthday" class="form-control" />
                    <ValidationMessage For="()=>EditStudentDB.Birthday" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="om" class="form-label">Város</label>
                    <InputText id="om" @bind-Value="EditStudentDB.City" class="form-control" />
                    <ValidationMessage For="()=>EditStudentDB.City" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-danger">save</button>
                <a href="/sudentindex" class="btn btn-success">Back to the Student List</a>

            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    public long Id { get; set; }

    [SupplyParameterFromForm]
    public Student? EditStudentDB { get; set; }


    protected override async Task OnInitializedAsync()
    {
        EditStudentDB = await DB.Students.FirstOrDefaultAsync(e => e.StudentId == Id);
        if (EditStudentDB is null)
        {
            NavManager.NavigateTo("/Error");
        }

    }
    public async Task UpdateStudent()
    {
        DB.Attach(EditStudentDB).State = EntityState.Modified;
        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EditStudentDBExc(EditStudentDB!.StudentId))
            {
                NavManager.NavigateTo("/Error");
            }
            else
            {
                throw;
            }            
        }
        NavManager.NavigateTo("/sudentindex");
    }

    bool EditStudentDBExc(long id) //ellenőrizzük hogy van e még ilyen a DB-ben
    {
        return DB.Students.Any(e => e.StudentId == id);
    }

}
